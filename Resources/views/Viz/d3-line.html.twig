<!DOCTYPE html>
<meta charset="utf-8">
<style>

body {
  font: 10px sans-serif;
}

svg {
    display: block;
    width: 100%;
    height: 100%;
}

svg .data-point {
    stroke: blue;
    stroke-width: 1.5px;
    fill: blue;        
}

svg .data-point-text {
    font-family: sans-serif;
    font-size: 11px;
    fill: red;
}

svg .axis path, 
svg .axis line {
    fill: none;
    stroke: black;
}

svg .axis text {
    font-family: sans-serif;
    font-size: 11px;
}
.line {
  fill: none;
  stroke: steelblue;
  stroke-width: 1.5px;
}


</style>
<body>
{% block javascripts %}
<script src="{{ asset('/Symfony/web/js/d3.v3.js') }}" type="text/javascript"></script>
<script>
var margin = {
            "top": 10,
            "right": 10,
            "bottom": 50,
            "left": 50
        },
        width = {{w}},
        height = {{h}};


// get the data
    var data = {{data|json_encode|raw}};

    var color = d3.scale.{{color}}();

// Define the padding around the graph
    var padding = 10;

// Set the scales
    var x = d3.scale.ordinal()
        .domain(data.map(function(d) {
            return d.labels;}))
        //.rangeRoundBands([0, width], 0);
        .rangePoints([0, width], 0.7);

    var y = d3.scale.linear()
        .domain([0, d3.max(data, function(d) { return d.values; })])
        .range([height, 0]);

    var xAxis = d3.svg.axis().scale(x).orient("bottom");
    var yAxis = d3.svg.axis().scale(y).orient("left");

 // draw line graph
    var line = d3.svg.line()
        .x(function(d) { return x(d.labels); })
        .y(function(d) { return y(d.values); })
        .interpolate("linear");
        
// Create the SVG 'canvas'
    var svg = d3.select("body").append("svg")
            .attr("class", "chart")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom).append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.right + ")");
    
    svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis)
    .selectAll(".tick text")
      .call(wrap, x.rangeBand());

    svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);
      
    svg.append("path")
      .attr("d",line(data))
      .attr("stroke", color)
      .attr("stroke-width", 2)
      .attr("fill", "none");

        function wrap(text, width) 
        {
          //  alert('wrap!');
          text.each(function() 
          {
            var text = d3.select(this),
                words = text.text().split(/\s+/).reverse(),
                word,
                line = [],
                lineNumber = 0,
                lineHeight = 1.1, // ems
                y = text.attr("y"),
                dy = parseFloat(text.attr("dy")),
                tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em");
            while (word = words.pop()) {
              line.push(word);
              tspan.text(line.join(" "));
              if (tspan.node().getComputedTextLength() > width) {
                line.pop();
                tspan.text(line.join(" "));
                line = [word];
                tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
              }
            }
          });
      }

</script>
{% endblock %}

