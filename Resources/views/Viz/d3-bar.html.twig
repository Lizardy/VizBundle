<!DOCTYPE html>
<meta charset="utf-8">
<style>

body {
  font: 10px sans-serif;
}

.bar rect {
  fill: steelblue;
  shape-rendering: crispEdges;
}

.bar text {
  fill: #fff;
}

.bar:hover {
    fill: #fff ;
}

.d3-tip {
  line-height: 1;
  font-weight: bold;
  padding: 12px;
  background: rgba(0, 0, 0, 0.8);
  color: #fff;
  border-radius: 2px;
}

/* Creates a small triangle extender for the tooltip */
.d3-tip:after {
  box-sizing: border-box;
  display: inline;
  font-size: 10px;
  width: 100%;
  line-height: 1;
  color: rgba(0, 0, 0, 0.8);
  content: "\25BC";
  position: absolute;
  text-align: center;
}

/* Style northward tooltips differently */
.d3-tip.n:after {
  margin: -1px 0 0 0;
  top: 100%;
  left: 0;
}

.axis path, .axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

</style>
<body>
{% block javascripts %}
<script src="{{ asset('/Symfony/web/js/d3.v3.js') }}" type="text/javascript"></script>
<script src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script>
<script>

/*var data = { "labels": [
    "2013-07","2013-08","2013-09","2013-10","2013-11","2013-12","2014-01","2014-02","2014-03","2014-04","2014-05",],
"values":
    [ 88, 40, 2160, 3585, 2527, 3167, 2328, 5797, 4895, 3396, 681,]
};*/
    
    var data = {{data|json_encode|raw}};

    var color = d3.scale.{{color}}();

    var margin = {
            "top": 10,
            "right": 10,
            "bottom": 50,
            "left": 50
        },
        width = {{w}},
        height = {{h}};
    var need_rotate = false;
    if (width < 1000)
        {
            need_rotate =true;
            //width = 132; 
        }
    var x = d3.scale.ordinal()
        .domain(data.labels.map(function(d) {
            return d;}))
        .rangeRoundBands([0, width], 0);

    var y = d3.scale.linear()
        .domain([0, d3.max(data.values)])
        .range([height, 0]);

    var xAxis = d3.svg.axis().scale(x).orient("bottom");
    var yAxis = d3.svg.axis().scale(y).orient("left");

    var tip = d3.tip()
      .attr('class', 'd3-tip')
      .offset([-10, 0])
      .html(function(d) {
        return "<strong>{{ty}} </strong> <span style='color:red'>" + d.values + "</span>";
      });

    var svgContainer = d3.select("body").append("svg")
        .attr("class", "chart")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom).append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.right + ")");

    svgContainer.call(tip);
    
    if (need_rotate)
    {
        svgContainer.append("g")
            .attr("class", "x axis rotate_labels")
            .attr("transform", "translate( 0," + height + ")")
            .call(xAxis)
        .selectAll(".tick text")
            .call(wrap, x.rangeBand());
    }
    else
    {
        svgContainer.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate( 0," + height + ")")
            .call(xAxis)
        .selectAll(".tick text")
            .call(wrap, x.rangeBand());
    }

    svgContainer.append("g")
        .attr("class", "y axis").call(yAxis)
        .append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end")
            .text("");

    svgContainer.selectAll(".bar").data(data.values).enter().append("rect")
        .style("fill", color)
        .attr("class", "bar")
        .attr("x", function(d, i) {
            return i * x.rangeBand();
        })
        .attr("y", function(d) {
            return y(d);
        })
        .attr("width", function(){
            return x.rangeBand();
        })
        .attr("height", function(d) {
            return height -y(d);
        })
        .on('mouseover', tip.show)
        .on('mouseout', tip.hide)
        
        
        function wrap(text, width) 
        {
          text.each(function() 
          {
            var text = d3.select(this),
                words = text.text().split(/\s+/).reverse(),
                word,
                line = [],
                lineNumber = 0,
                lineHeight = 1.1, // ems
                y = text.attr("y"),
                dy = parseFloat(text.attr("dy")),
                tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em");
            while (word = words.pop()) {
              line.push(word);
              tspan.text(line.join(" "));
              if (tspan.node().getComputedTextLength() > width) {
                line.pop();
                tspan.text(line.join(" "));
                line = [word];
                tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
              }
            }
          });
      }

</script>
{% endblock %}

</body>
